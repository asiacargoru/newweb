require('dotenv').config({ path: './backend/.env' }); // –ò—Å–ø–æ–ª—å–∑—É–µ–º backend –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

const pool = new Pool({
  host: process.env.POSTGRES_HOST,
  port: parseInt(process.env.POSTGRES_PORT) || 5432,
  database: process.env.POSTGRES_DB,
  user: process.env.POSTGRES_USER,
  password: process.env.POSTGRES_PASSWORD,
  ssl: process.env.POSTGRES_SSL === 'true' ? { rejectUnauthorized: false } : false
});

async function exportToNextJS() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã
    const result = await pool.query('SELECT * FROM components ORDER BY created_at');
    const components = result.rows;
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${components.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n`);
    
    const targetDir = path.join(__dirname, 'frontend', 'components', 'lovable');
    
    // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É
    if (!fs.existsSync(targetDir)) {
      fs.mkdirSync(targetDir, { recursive: true });
    }
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    for (const comp of components) {
      let code = comp.code_jsx;
      
      // –î–æ–±–∞–≤–ª—è–µ–º 'use client' –µ—Å–ª–∏ –µ—Å—Ç—å —Ö—É–∫–∏
      if (code.includes('useState') || code.includes('useEffect') || code.includes('onClick')) {
        if (!code.includes('use client')) {
          code = `'use client';\n\n${code}`;
        }
      }
      
      // –ó–∞–º–µ–Ω—è–µ–º react-router-dom –Ω–∞ next/link
      code = code.replace(/from ['"]react-router-dom['"]/g, 'from "next/link"');
      code = code.replace(/<Link to=/g, '<Link href=');
      
      // –ó–∞–º–µ–Ω—è–µ–º img –Ω–∞ Next Image (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ)
      // code = code.replace(/<img /g, '<Image ');
      
      const fileName = `${comp.name}.tsx`;
      const filePath = path.join(targetDir, fileName);
      
      fs.writeFileSync(filePath, code, 'utf-8');
      console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${fileName}`);
    }
    
    // –°–æ–∑–¥–∞—ë–º index —Ñ–∞–π–ª
    const indexContent = components
      .map(c => `export { default as ${c.name} } from './${c.name}';`)
      .join('\n');
    
    fs.writeFileSync(
      path.join(targetDir, 'index.ts'),
      indexContent,
      'utf-8'
    );
    
    console.log('\nüéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!');
    console.log(`üìÇ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ${targetDir}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await pool.end();
  }
}

exportToNextJS();
